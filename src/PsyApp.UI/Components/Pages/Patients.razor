@page "/patients"
@using Microsoft.AspNetCore.Identity
@using PsyApp.UI.Data
@using PsyApp.UI.Services
@using Microsoft.AspNetCore.Authorization

@attribute [Authorize]

@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IDoctorService DoctorService
@inject IPatientService PatientService
@inject NavigationManager Navigation

<PageTitle>My Patients</PageTitle>

<div class="d-flex justify-content-between align-items-center mb-4">
    <h1>My Patients</h1>
    <a href="/patients/create" class="btn btn-primary">
        <i class="fas fa-plus"></i> Add New Patient
    </a>
</div>

@if (isLoading)
{
    <div class="text-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p>Loading patients...</p>
    </div>
}
else if (patients == null || !patients.Any())
{
    <div class="alert alert-info">
        <i class="fas fa-info-circle"></i>
        You don't have any patients yet. <a href="/patients/create">Add your first patient</a>.
    </div>
}
else
{
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">
                        <i class="fas fa-users"></i> 
                        Patients (@patients.Count)
                    </h5>
                </div>
                <div class="card-body p-0">
                    <div class="table-responsive">
                        <table class="table table-hover mb-0">
                            <thead class="table-light">
                                <tr>
                                    <th>Name</th>
                                    <th>Email</th>
                                    <th>Phone</th>
                                    <th>Created</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var patient in patients)
                                {
                                    <tr>
                                        <td>
                                            <strong>@patient.FullName</strong>
                                        </td>
                                        <td>
                                            @if (!string.IsNullOrEmpty(patient.Email))
                                            {
                                                <a href="mailto:@patient.Email">@patient.Email</a>
                                            }
                                            else
                                            {
                                                <span class="text-muted">-</span>
                                            }
                                        </td>
                                        <td>
                                            @if (!string.IsNullOrEmpty(patient.PhoneNumber))
                                            {
                                                <a href="tel:@patient.PhoneNumber">@patient.PhoneNumber</a>
                                            }
                                            else
                                            {
                                                <span class="text-muted">-</span>
                                            }
                                        </td>
                                        <td>
                                            <small class="text-muted">
                                                @patient.CreatedAt.ToString("MMM dd, yyyy")
                                            </small>
                                        </td>
                                        <td>
                                            <div class="btn-group btn-group-sm">
                                                <a href="/patients/@patient.Id" class="btn btn-outline-primary" title="View Details">
                                                    <i class="fas fa-eye"></i>
                                                </a>
                                                <a href="/patients/@patient.Id/edit" class="btn btn-outline-secondary" title="Edit">
                                                    <i class="fas fa-edit"></i>
                                                </a>
                                                <button class="btn btn-outline-danger" title="Delete" 
                                                        @onclick="() => DeletePatient(patient.Id, patient.FullName)">
                                                    <i class="fas fa-trash"></i>
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Confirm Delete</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                Are you sure you want to delete <strong>@patientToDelete</strong>? This action cannot be undone.
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" @onclick="ConfirmDelete">Delete</button>
            </div>
        </div>
    </div>
</div>

@code {
    private List<Patient>? patients;
    private bool isLoading = true;
    private int? currentDoctorId;
    private int patientIdToDelete;
    private string patientToDelete = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadPatientsAsync();
    }

    private async Task LoadPatientsAsync()
    {
        isLoading = true;
        
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity?.IsAuthenticated == true)
        {
            var user = await UserManager.GetUserAsync(authState.User);
            if (user != null)
            {
                currentDoctorId = await DoctorService.GetCurrentDoctorIdAsync(user.Id);
                if (currentDoctorId.HasValue)
                {
                    patients = await PatientService.GetPatientsByDoctorAsync(currentDoctorId.Value);
                }
            }
        }
        
        isLoading = false;
        StateHasChanged();
    }

    private void DeletePatient(int patientId, string patientName)
    {
        patientIdToDelete = patientId;
        patientToDelete = patientName;
        // Show modal (requires JavaScript or use a Blazor modal component)
    }

    private async Task ConfirmDelete()
    {
        if (currentDoctorId.HasValue && patientIdToDelete > 0)
        {
            var success = await PatientService.DeletePatientAsync(patientIdToDelete, currentDoctorId.Value);
            if (success)
            {
                await LoadPatientsAsync();
            }
        }
        
        patientIdToDelete = 0;
        patientToDelete = "";
        // Hide modal (requires JavaScript or use a Blazor modal component)
    }
}
