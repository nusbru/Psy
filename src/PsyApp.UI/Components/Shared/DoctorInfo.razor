@using Microsoft.AspNetCore.Identity
@using PsyApp.UI.Data
@using Microsoft.EntityFrameworkCore

@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ApplicationDbContext DbContext

@if (doctor != null)
{
    <div class="card mb-4">
        <div class="card-header">
            <h5><i class="fas fa-user-md"></i> Doctor Information</h5>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-6">
                    <p><strong>Name:</strong> @doctor.FullName</p>
                    <p><strong>License Number:</strong> @doctor.LicenseNumber</p>
                    @if (!string.IsNullOrEmpty(doctor.Specialization))
                    {
                        <p><strong>Specialization:</strong> @doctor.Specialization</p>
                    }
                </div>
                <div class="col-md-6">
                    @if (!string.IsNullOrEmpty(doctor.PhoneNumber))
                    {
                        <p><strong>Phone:</strong> @doctor.PhoneNumber</p>
                    }
                    @if (!string.IsNullOrEmpty(doctor.Bio))
                    {
                        <p><strong>Bio:</strong> @doctor.Bio</p>
                    }
                </div>
            </div>
        </div>
    </div>
}
else if (isLoggedIn && !isLoading)
{
    <div class="alert alert-info">
        <i class="fas fa-info-circle"></i> No doctor profile found. You may have registered as a regular user.
    </div>
}

@code {
    private Doctor? doctor;
    private bool isLoggedIn = false;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        isLoggedIn = authState.User.Identity?.IsAuthenticated ?? false;

        if (isLoggedIn)
        {
            var user = await UserManager.GetUserAsync(authState.User);
            if (user != null)
            {
                doctor = await DbContext.Doctors
                    .FirstOrDefaultAsync(d => d.ApplicationUserId == user.Id);
            }
        }
        
        isLoading = false;
        StateHasChanged();
    }
}
